---
title: "exploring_estimateates"
format: html
editor: visual
---

# Preliminaries

```{r}
library(tidyverse)
library(readxl)
```

```{r}
Fermi_Data_Original <- read_excel("Fermi-Data.xlsx")
my_data <- data.frame(Fermi_Data_Original)

options(scipen = 999)
```

Renaming collumns

```{r}
my_data <- my_data %>%
    rename(
        Answers = Correct.answers,
        Timothy_estimate = Timothy.Answer,
        Timothy_average = Timothy.s.guess,
        Markus_estimate = Markus.Answer,
        Markus_average = Markus.s.guess,
        Marvin_estimate = Marvin.Answer,
        Marvin_average = Marvin.s.guess,
        Adrian_estimate = Adrian.Answer,
        Adrian_average = Adrian.s.guess,
    )
```

Function to calculate log/exp error

```{r}
calc_error <- function(actual, forecast) {
    abs(log10(max(0.01, actual)) - log10(max(0.01, forecast)))
}
```

Add columns for the two mean values

```{r}
# Calculate mean forecast and mean guess
my_data$Mean_of_estimates <- rowMeans(my_data[, c("Timothy_estimate", "Markus_estimate", "Marvin_estimate", "Adrian_estimate")], na.rm = TRUE)
my_data$Mean_of_averages <- rowMeans(my_data[, c("Timothy_average", "Markus_average", "Marvin_average", "Adrian_average")], na.rm = TRUE)
```

create results dataframe

```{r}
# Create results dataframe with errors
people <- c("Timothy", "Markus", "Marvin", "Adrian", "Mean")
types <- c("_estimate", "_average")

results <- data.frame(matrix(ncol = 10, nrow = 10))
names(results) <- paste0(rep(people, each = 2), rep(types, times = 5), "_error")


```


```{r}
for (i in 1:10) {
    for (j in 1:10) {
        results[i, j] <- calc_error(my_data$Answers[i], my_data[i, j + 2])
    }
}
```



```{r}
for (i in 1:10) {
    sum_row_estimates <- sum(results[i, c(1, 3, 5, 7)], na.rm = TRUE)
    sum_row_averages <- sum(results[i, c(2, 4, 6, 8)], na.rm = TRUE)
    for (j in c(1, 3, 5, 7, 9)) {
        results[i, j] <- results[i, j] / sum_row_estimates
    }
    for (j in c(2, 4, 6, 8, 10)) {
        results[i, j] <- results[i, j] / sum_row_averages
    }
}

```

```{r}


```



```{r}



```




Create column with normalized errors

```{r}


```

New dataframe with the summed normed_errors

```{r}

summed_errors <- data.frame(
    Timothy_Answer = sum(data$norm_Timothy_error_Answer, na.rm = TRUE),
    Timothy_averagege = sum(data$norm_Timothy_error_s.guess, na.rm = TRUE),
    Markus_Answer = sum(data$norm_Markus_error_Answer, na.rm = TRUE),
    Markus_averagege = sum(data$norm_Markus_error_s.guess, na.rm = TRUE),
    Marvin_Answer = sum(data$norm_Marvin_error_Answer, na.rm = TRUE),
    Marvin_averagege = sum(data$norm_Marvin_error_s.guess, na.rm = TRUE),
    Adrian_Answer = sum(data$norm_Adrian_error_Answer, na.rm = TRUE),
    Adrian_averagege = sum(data$norm_Adrian_error_s.guess, na.rm = TRUE),
    Mean_Answer = sum(data$norm_Mean_error_Answer, na.rm = TRUE),
    Mean_averagege = sum(data$norm_Mean_error_s.guess, na.rm = TRUE)
)

summed_errors <- summed_errors * 0.1

```

Performance of estimates vs averages

```{r}

human_total_error <- summed_errors[1, 1] + summed_errors[1, 3] + summed_errors[1, 5] + summed_errors[1, 7]
average_total_error <- summed_errors[1, 2] + summed_errors[1, 4] + summed_errors[1, 6] + summed_errors[1, 8]


print(human_total_error / 10)
print(average_total_error / 10)



```

```{r}




# Calculate errors for mean forecast and mean guess
data$mean_forecast_error <- sapply(1:nrow(data), function(i) calc_error(data$Correct_estimates[i], data$mean_forecast[i]))
data$mean_guess_error <- sapply(1:nrow(data), function(i) calc_error(data$Correct_estimates[i], data$mean_guess[i]))

# Normalize these new errors
data$norm_mean_forecast_error <- NA
data$norm_mean_guess_error <- NA

for (i in 1:nrow(data)) {
    all_errors <- c(
        data[i, grep("_error_", names(data))],
        data$mean_forecast_error[i],
        data$mean_guess_error[i]
    )
    total_error <- sum(all_errors, na.rm = TRUE)

    if (total_error > 0) {
        data$norm_mean_forecast_error[i] <- data$mean_forecast_error[i] / total_error
        data$norm_mean_guess_error[i] <- data$mean_guess_error[i] / total_error
    } else {
        data$norm_mean_forecast_error[i] <- 0
        data$norm_mean_guess_error[i] <- 0
    }
}

# Add to summed_errors dataframe
summed_errors$mean_forecast <- sum(data$norm_mean_forecast_error, na.rm = TRUE) * 0.1
summed_errors$mean_guess <- sum(data$norm_mean_guess_error, na.rm = TRUE) * 0.1

# Print results
cat("Total error for mean forecast:", summed_errors$mean_forecast, "\n")
cat("Total error for mean guess:", summed_errors$mean_guess, "\n")


```