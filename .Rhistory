library(readxl)
Fermi_Data <- read_excel("Fermi-Data.xlsx")
View(Fermi_Data)
df = Fermi_Data
# Load required library
library(dplyr)
data = Fermi_Data
df = 0
data = Fermi_Data
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
# Normalize by the actual value, but handle zeros and very small values
normalization <- pmax(abs(actual), 1e-10)  # Use 1e-10 as a small positive number
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian"),
NMAE = c(
calculate_nmae(data$Correct.answers, data$Timothy.Answer),
calculate_nmae(data$Correct.answers, data$Markus.Answer),
calculate_nmae(data$Correct.answers, data$Marvin.Answer),
calculate_nmae(data$Correct.answers, data$Adrian.Answer)
)
)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
# Normalize by the actual value, but handle zeros and very small values
normalization <- pmax(abs(actual), 1e-10)  # Use 1e-10 as a small positive number
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian"),
NMAE = c(
calculate_nmae(data$Correct.answers, data$Timothy.Answer),
calculate_nmae(data$Correct.answers, data$Markus.Answer),
calculate_nmae(data$Correct.answers, data$Marvin.Answer),
calculate_nmae(data$Correct.answers, data$Adrian.Answer)
)
)
# Rank the results (lower NMAE is better)
results <- results %>%
arrange(NMAE) %>%
mutate(Rank = row_number())
# Display the results
print(results)
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
View(data)
data[1,1]
data[1,2]
data[1,2]*8-data[5,5]*8-data[4,2]*8-data[7,8]
8- (data[1,2]*8-data[5,5]*8-data[4,2]*8-data[7,8])
- (data[1,2]*8-data[5,5]*8-data[4,2]*8-data[7,8])
abs(data[1,2])
data[1,2]
data[10,3]
data[10,3]
abs(data[10,3])
data = Fermi_Data
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
# Normalize by the actual value, but handle zeros and very small values
normalization <- pmax(abs(actual), 1e-10)  # Use 1e-10 as a small positive number
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian"),
NMAE = c(
calculate_nmae(data$Correct.answers, data$Timothy.Answer),
calculate_nmae(data$Correct.answers, data$Markus.Answer),
calculate_nmae(data$Correct.answers, data$Marvin.Answer),
calculate_nmae(data$Correct.answers, data$Adrian.Answer)
)
)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
# Normalize by the actual value, but handle zeros and very small values
normalization <- pmax(abs(actual), 1e-10)  # Use 1e-10 as a small positive number
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian"),
NMAE = c(
calculate_nmae(data$Correct.answers, data$Timothy.Answer),
calculate_nmae(data$Correct.answers, data$Markus.Answer),
calculate_nmae(data$Correct.answers, data$Marvin.Answer),
calculate_nmae(data$Correct.answers, data$Adrian.Answer)
)
)
data = Fermi_Data
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
# Normalize by the actual value, but handle zeros and very small values
normalization <- pmax(abs(actual), 1e-10)  # Use 1e-10 as a small positive number
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian"),
NMAE = c(
calculate_nmae(data$Correct.answers, data$Timothy.Answer),
calculate_nmae(data$Correct.answers, data$Markus.Answer),
calculate_nmae(data$Correct.answers, data$Marvin.Answer),
calculate_nmae(data$Correct.answers, data$Adrian.Answer)
)
)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
# Normalize by the actual value, but handle zeros and very small values
normalization <- pmax(abs(actual), 1)  # Use 1e-10 as a small positive number
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
}
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
# Normalize by the actual value, but handle zeros and very small values
normalization <- pmax(abs(actual), 1)  # Use 1e-10 as a small positive number
return(mean(abs(actual - forecast) / normalization, na.rm = TRUE))
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian"),
NMAE = c(
calculate_nmae(data$Correct.answers, data$Timothy.Answer),
calculate_nmae(data$Correct.answers, data$Markus.Answer),
calculate_nmae(data$Correct.answers, data$Marvin.Answer),
calculate_nmae(data$Correct.answers, data$Adrian.Answer)
)
)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 1e-10)
mean(abs(actual - forecast) / normalization, na.rm = TRUE)
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]])
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the results
print(results)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 1)
mean(abs(actual - forecast) / normalization, na.rm = TRUE)
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]])
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the results
print(results)
normalization <- pmax(abs(actual), 2)
data = Fermi_Data
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 2)
mean(abs(actual - forecast) / normalization, na.rm = TRUE)
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]])
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the results
print(results)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 1000)
mean(abs(actual - forecast) / normalization, na.rm = TRUE)
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]])
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the results
print(results)
options(scipen=999)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 1000)
mean(abs(actual - forecast) / normalization, na.rm = TRUE)
}
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]])
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the results
print(results)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 1000)
return(abs(actual - forecast) / normalization)
}
# Add NMAE columns for each person
Fermi_Data$NMAE_Timothy <- calculate_nmae(Fermi_Data[["Correct answers"]], Fermi_Data[["Timothy Answer"]])
Fermi_Data$NMAE_Markus <- calculate_nmae(Fermi_Data[["Correct answers"]], Fermi_Data[["Markus Answer"]])
Fermi_Data$NMAE_Marvin <- calculate_nmae(Fermi_Data[["Correct answers"]], Fermi_Data[["Marvin Answer"]])
Fermi_Data$NMAE_Adrian <- calculate_nmae(Fermi_Data[["Correct answers"]], Fermi_Data[["Adrian Answer"]])
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 1000)
return(abs(actual - forecast) / normalization)
}
# Add NMAE columns for each person
data$NMAE_Timothy <- calculate_nmae(data[["Correct answers"]], data[["Timothy Answer"]])
data$NMAE_Markus <- calculate_nmae(data[["Correct answers"]], data[["Markus Answer"]])
data$NMAE_Marvin <- calculate_nmae(data[["Correct answers"]], data[["Marvin Answer"]])
data$NMAE_Adrian <- calculate_nmae(data[["Correct answers"]], data[["Adrian Answer"]])
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]]) %>% mean(na.rm = TRUE)
})
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]]) %>% mean(na.rm = TRUE)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]]) %>% mean(na.rm = TRUE)
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the updated data frame with NMAE columns and the results
print(data)
print(results)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 1)
return(abs(actual - forecast) / normalization)
}
# Add NMAE columns for each person
data$NMAE_Timothy <- calculate_nmae(data[["Correct answers"]], data[["Timothy Answer"]])
data$NMAE_Markus <- calculate_nmae(data[["Correct answers"]], data[["Markus Answer"]])
data$NMAE_Marvin <- calculate_nmae(data[["Correct answers"]], data[["Marvin Answer"]])
data$NMAE_Adrian <- calculate_nmae(data[["Correct answers"]], data[["Adrian Answer"]])
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]]) %>% mean(na.rm = TRUE)
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the updated data frame with NMAE columns and the results
print(data)
print(results)
# Function to calculate Normalized Mean Absolute Error
calculate_nmae <- function(actual, forecast) {
normalization <- pmax(abs(actual), 10)
return(abs(actual - forecast) / normalization)
}
# Add NMAE columns for each person
data$NMAE_Timothy <- calculate_nmae(data[["Correct answers"]], data[["Timothy Answer"]])
data$NMAE_Markus <- calculate_nmae(data[["Correct answers"]], data[["Markus Answer"]])
data$NMAE_Marvin <- calculate_nmae(data[["Correct answers"]], data[["Marvin Answer"]])
data$NMAE_Adrian <- calculate_nmae(data[["Correct answers"]], data[["Adrian Answer"]])
# Calculate NMAE for each person
results <- data.frame(
Person = c("Timothy", "Markus", "Marvin", "Adrian")
)
results$NMAE <- sapply(results$Person, function(person) {
calculate_nmae(data[["Correct answers"]], data[[paste0(person, " Answer")]]) %>% mean(na.rm = TRUE)
})
# Rank the results (lower NMAE is better)
results$Rank <- rank(results$NMAE)
# Sort the results by NMAE
results <- results[order(results$NMAE), ]
# Display the updated data frame with NMAE columns and the results
print(data)
print(results)
